import sys
from itertools import permutations
from math import sin, cos, pi
from matplotlib import pyplot as plt
import random
import networkx as nx
import matplotlib.pyplot as plt

plt.rcParams['font.sans-serif'] = ['SimHei']
plt.rcParams['axes.unicode_minus'] = False

def V_S(n,k):
    numbers = list(range(1, n + 1))
    perms = permutations(numbers, k)
    result = list(perms)
    hex_result = [''.join(map(lambda x: hex(x)[2:], perm)) for perm in result]
    return hex_result

def H(str1,str2):
    res = 0
    for i in range(len(str1)):
        if str1[i] != str2[i]:
            res = res + 1
    return res


def E(my_list, n, k):
    my_E_list = []

    my_set = set(my_list)


    for vertex1 in my_list:
        for vertex2 in (my_set - {vertex1}):
            for i in range(k):
                if vertex1[0] == vertex2[i] and vertex2[0] == vertex1[i] and H(vertex1, vertex2) == 2:
                    my_E_list.append([vertex1, vertex2])
                    break
            # 1-边逻辑
            if vertex1[0] != vertex2[0] and H(vertex1, vertex2) == 1:
                my_E_list.append([vertex1, vertex2])

    print(my_E_list)
    return quchong(my_E_list)


def quchong(list):
    unique_list = []
    seen_sublists = set()

    for sublist in list:

        sorted_str = ''.join(sorted(sublist))

        if sorted_str not in seen_sublists:
            unique_list.append(sorted(sublist))
            seen_sublists.add(sorted_str)
    print(len(unique_list))
    return unique_list

def drawSnk(n, k):
    V_s = V_S(n, k)
    # print(V_s)
    # print("点数：{}".format(len(V_s)))
    # print("顶点集：{}".format(V_s))
    E_s = E(V_s, n, k)
    # print("边数：{}".format(len(E_s)))
    # print("边集：{}".format(E_s))
    # int_V_s52_list = [int(element) for element in V_s]
    # int_E_s52_list = [[int(element) for element in sublist] for sublist in E_s]
    int_V_s52_list = [element for element in V_s]
    int_E_s52_list = [sublist[:] for sublist in E_s]

    list1 = []
    list2 = []
    vertices = int_V_s52_list
    print(vertices)
    edges = int_E_s52_list

    G = nx.Graph()


    G.add_nodes_from(vertices)


    G.add_edges_from(edges)


    last_digits_dict = {digit: [v for v in vertices if int(str(v)[-1]) == digit] for digit in range(10)}

    angles = {digit: 2 * pi * digit / 10 for digit in range(10)}


    pos = nx.shell_layout(G, nlist=list(last_digits_dict.values()))


    node_colors = [int(str(v)[-1]) for v in vertices]

    nx.draw(G, pos, with_labels=True, font_weight='bold', node_size=150, node_color=node_colors,
            font_color='white', font_size=6, edge_color='black', width=1, cmap=plt.cm.coolwarm)


    color_counts = {color: node_colors.count(color) for color in set(node_colors)}


    plt.show()

    count =0
    iter = int(input("请输入迭代次数："))
    select_nodes=int(input("请输入点数："))
    numm=0
    for i in range(iter):
        count += 1
        random_points = random.sample(int_V_s52_list, select_nodes)
        str_random_points = {str(num) for num in random_points}
        neighbors_count = set()
        for point in str_random_points:
              vertex_str = point
              first_char = vertex_str[0]
              for i in range(1,k):
                  new_string1 = vertex_str[i]+vertex_str[1:i]+first_char+vertex_str[i+1:]
                  neighbors_count.add(new_string1)
              seen = [False]*(n+1)
              for char in vertex_str:
                  num =int(char,16)
                  seen[num] = True
              for num in range(1,n+1):
                  if not seen[num]:
                      new_string2 = str(num)+vertex_str[1:]
                      neighbors_count.add(new_string2)

        neighbors_count = neighbors_count-str_random_points
        print(neighbors_count)
        list1.append(count)
        print(len(neighbors_count))
        list2.append(len(neighbors_count))
        if len(neighbors_count)==n+(select_nodes-1)*k-2*select_nodes+1:
            numm = numm+1
    plt.plot(list1, list2, marker='o', linestyle='-', color='b', label='experimental value',zorder=3)
    plt.axhline(y=n+(select_nodes-1)*k-2*select_nodes+1, color='r', linestyle='--', label='theoretical value', linewidth=5,zorder=2)
    plt.xlabel('iterations',fontsize=40)
    plt.ylabel('number of neighbors',fontsize=40)
    plt.tick_params(axis='both', which='major', labelsize=40)

    plt.yticks(range(n+(select_nodes-1)*k-2*select_nodes+1, max(list2) + 1, 2))

    legend=plt.legend(fontsize=35, loc='upper center', bbox_to_anchor=(0.5, 1.15), ncol=2)
    for line in legend.get_lines():
        line.set_linewidth(5)
    plt.grid(True)
    print(numm)
    plt.show()


def main():
    try:
        n = int(input("请输入n的值："))
        k = int(input("请输入k的值："))
        if k <= 0 or k > n:
            raise ValueError("k必须是正整数且不大于n")
        drawSnk(n, k)
        # detect_fault(n, k)
    except ValueError as e:
        print(e)

if __name__ == "__main__":
    main()
